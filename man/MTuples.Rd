% Generated by roxygen2 (4.0.1): do not edit by hand
\docType{class}
\name{MTuples-class}
\alias{MTuples}
\alias{MTuples-class}
\alias{anyDuplicated,MTuples-method}
\alias{anyDuplicated.MTuples}
\alias{compare,MTuples,MTuples-method}
\alias{duplicated,MTuples-method}
\alias{duplicated.MTuples}
\alias{getIPD,MTuples-method}
\alias{getM,MTuples-method}
\alias{getPos,MTuples-method}
\alias{match,MTuples,MTuples-method}
\alias{order,MTuples-method}
\alias{sort,MTuples-method}
\title{MTuples class and constructor}
\usage{
MTuples(seqnames = Rle(), pos = matrix(), strand = Rle("*",
  length(seqnames)), ..., seqlengths = NULL, seqinfo = NULL)

\S4method{getPos}{MTuples}(x)

\S4method{getM}{MTuples}(x)

\S4method{getIPD}{MTuples}(x)

\S4method{compare}{MTuples,MTuples}(x, y)

duplicated.MTuples(x, incomparables = FALSE, ...)

\S4method{duplicated}{MTuples}(x, incomparables = FALSE, fromLast = FALSE)

anyDuplicated.MTuples(x, incomparables = FALSE, ...)

\S4method{anyDuplicated}{MTuples}(x, incomparables = FALSE)

\S4method{match}{MTuples,MTuples}(x, table, nomatch = NA_integer_,
  incomparables = NULL, ignore.strand = FALSE)

\S4method{order}{MTuples}(..., na.last = TRUE, decreasing = FALSE)

\S4method{sort}{MTuples}(x, decreasing = FALSE, ignore.strand = FALSE, by)
}
\arguments{
\item{seqnames}{\code{\link[IRanges]{Rle}} object, character vector, or
factor containing the sequence names.}

\item{pos}{\code{matrix} where each row stores the ordered positions of an
m-tuple.}

\item{strand}{\code{\link[IRanges]{Rle}} object, character vector, or factor
containing the strand information.}

\item{...}{Optional metadata columns. These columns cannot be named "start",
"end", "width", or "element". A named integer vector "\code{seqlength}" can
be used instead of \code{seqinfo}.}

\item{seqlengths}{an integer vector named with the sequence names and
containing the lengths (or \code{NA}) for each \code{level(seqnames)}.}

\item{seqinfo}{a \code{\link[GenomeInfoDb]{Seqinfo}} object containing
allowed sequence names and lengths (or \code{NA}) for each
\code{level(seqnames)}.}

\item{x}{An \code{\link{MTuples}} or \code{\link{CoMeth}} object.}

\item{incomparables}{
    The \code{duplicated} method for \link{Vector} objects does NOT
    support this argument.

    The \code{unique} method for \link{Vector} objects, which is
    implemented on top of \code{duplicated}, propagates this argument
    to its call to \code{duplicated}.

    See \code{?base::\link[base]{duplicated}} and
    \code{?base::\link[base]{unique}} for more information about this
    argument.
  }

\item{decreasing}{
    See \code{?base::\link[base]{sort}}.
  }

\item{nomatch}{
    See \code{?base::\link[base]{match}} for a description of
    these arguments.
  }

\item{na.last}{
    See \code{?base::\link[base]{order}} for a description of
    these arguments.
  }
}
\value{
An \code{MTuples} object.
}
\description{
An m-tuple is a tuple of individual basepairs that are on the same
chromosome, where \eqn{m = 1, 2, \ldots} is the number of positions in the
tuple. For example, (chr1:30, chr1:33, chr1:40) is a 3-tuple of the positions
30, 33 and 40 on chromosome 1. Note that the strand of the m-tuple is optional.
The \code{MTuples} class extends the \code{\link[GenomicRanges]{GRanges}}
class by adding the \code{extraPos} slot (see below for details).
}
\details{
Internally, an m-tuple is stored as a \code{\link[GenomicRanges]{GRanges}}
with any "extra" positions stored in the \code{extraPos} slot. For example,
the first and last positions of the  3-tuple (chr1:30, chr1:33, chr1:40) are
stored as the \code{start} and \code{end}, respectively, of the
\code{\link[GenomicRanges]{GRanges}}, i.e.,
\code{GRanges('chr1', IRanges(start = 30, end = 40))}. The "extra" position,
chr1:33, is stored as an element in matrix in the \code{extraPos} slot.
}
\section{Differences to \code{\link[GenomicRanges]{GRanges}}}{

There are several differences between
\code{\link[GenomicRanges]{GRanges}} and \code{MTuples}.

\subsection{Conceptual}{
The main difference is suggested in the names; a
\code{\link[GenomicRanges]{GRanges}} object is designed to store
\emph{ranges} whereas an \code{MTuples} object is designed to store tuples.
A range is a closed interval and so includes all points in between the
"start" and "end", inclusive. By contrast, a tuple is a \emph{set} and so
only includes those points listed in the tuple. See the section below called
\code{findOverlaps} for some implications of this difference.}

\subsection{\code{extraPos}}{
An \code{MTuples} object contains an extra slot called \code{extraPos}. This
is only relevant if creating m-tuple with \eqn{m \ge 3} when it stores
positions 2, ..., m - 1 of the m-tuple as an integer matrix. When \eqn{m < 3}
this slot is a 1-column matrix of \code{NA}.}
}

\section{Coercion}{

\strong{TODO}: Insert help for any coerction methods.
}

\section{Accessors}{

\strong{TODO}: Insert help for any accessor methods.
}

\section{Splitting and combining}{

\strong{TODO}: Insert help for any splitting and combining methods.
}

\section{Subsetting}{

\strong{TODO}: Describe any subsetting methods.
}

\section{Filtering}{

\strong{TODO}: Describe any filtering methods.
}

\section{Methods based on findOverlaps}{

\strong{TODO} Insert help for any findOverlaps-based methods.
}

\section{Other methods}{

\strong{TODO}: Describe any other methods.
}
\examples{
cat("TODO")
}

